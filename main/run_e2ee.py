# -*- coding: utf-8 -*-
import time
import random
import json
import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
import pickle

class E2EEBot:
    def __init__(self):
        self.driver = None
        self.is_running = False
        self.messages_sent = 0
        self.config = self.load_config()
        
    def load_config(self):
        """‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç"""
        default_config = {
            "e2ee_url": "https://www.facebook.com/messages/e2ee/t/",
            "delay": 20,
            "min_delay": 15,
            "max_delay": 40,
            "messages_file": "data/messages.txt",
            "cookies_file": "data/cookies/fb_e2ee_cookies.pkl",
            "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        }
        
        try:
            with open('main/config.json', 'r', encoding='utf-8') as f:
                user_config = json.load(f)
                default_config.update(user_config)
        except FileNotFoundError:
            print("‚ö†Ô∏è  ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó ‡§´‡§æ‡§á‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä, ‡§°‡§ø‡§´‡•â‡§≤‡•ç‡§ü ‡§Ø‡•Ç‡§ú‡§º ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç")
            
        return default_config
    
    def setup_driver(self):
        """‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§∏‡•á‡§ü‡§Ö‡§™ ‡§ï‡§∞‡•á‡§Ç - E2EE ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ñ‡§æ‡§∏"""
        print("üñ•Ô∏è  E2EE ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§∏‡•á‡§ü‡§Ö‡§™ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...")
        
        options = Options()
        
        # E2EE ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)
        options.add_argument("--user-data-dir=./profiles/chrome_profile")
        options.add_argument("--profile-directory=Default")
        options.add_argument("--disable-extensions")
        options.add_argument("--disable-plugins")
        options.add_argument("--disable-images")
        
        # User agent ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
        options.add_argument(f"--user-agent={self.config['user_agent']}")
        
        try:
            self.driver = webdriver.Chrome(options=options)
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            return True
        except Exception as e:
            print(f"‚ùå ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§∏‡•á‡§ü‡§Ö‡§™ ‡§Æ‡•á‡§Ç error: {e}")
            return False
    
    def login_to_e2ee(self):
        """E2EE ‡§ö‡•à‡§ü ‡§Æ‡•á‡§Ç ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç"""
        if not self.driver:
            if not self.setup_driver():
                return False
        
        print("üîê E2EE ‡§ö‡•à‡§ü ‡§Æ‡•á‡§Ç ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç...")
        
        try:
            # E2EE URL ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Ç
            self.driver.get(self.config['e2ee_url'])
            time.sleep(5)
            
            # ‡§™‡§π‡§≤‡•á ‡§ï‡•Å‡§ï‡•Ä‡§ú ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç
            if self.load_cookies():
                self.driver.refresh()
                time.sleep(5)
                print("‚úÖ ‡§ï‡•Å‡§ï‡•Ä‡§ú ‡§∏‡•á ‡§≤‡•â‡§ó‡§ø‡§® ‡§∏‡§´‡§≤!")
                return True
            
            print("""
            ====================================
            ü§ñ MANUAL LOGIN REQUIRED
            ====================================
            
            1. ‡§Ö‡§¨ Facebook ‡§ï‡§æ login page ‡§ñ‡•Å‡§≤‡•á‡§ó‡§æ
            2. ‡§Ö‡§™‡§®‡§æ username/password ‡§°‡§æ‡§≤‡•á‡§Ç
            3. 2-factor authentication complete ‡§ï‡§∞‡•á‡§Ç
            4. E2EE chat ‡§Æ‡•á‡§Ç ‡§™‡§π‡•Å‡§Ç‡§ö‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ENTER ‡§¶‡§¨‡§æ‡§è‡§Ç
            
            ====================================
            """)
            
            input("üëâ ‡§≤‡•â‡§ó‡§ø‡§® complete ‡§π‡•ã‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ENTER ‡§¶‡§¨‡§æ‡§è‡§Ç: ")
            
            # ‡§ï‡•Å‡§ï‡•Ä‡§ú ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç
            self.save_cookies()
            print("‚úÖ ‡§≤‡•â‡§ó‡§ø‡§® ‡§∏‡§´‡§≤! ‡§ï‡•Å‡§ï‡•Ä‡§ú ‡§∏‡•á‡§µ ‡§π‡•ã ‡§ó‡§à‡§Ç")
            return True
            
        except Exception as e:
            print(f"‚ùå ‡§≤‡•â‡§ó‡§ø‡§® ‡§Æ‡•á‡§Ç error: {e}")
            return False
    
    def save_cookies(self):
        """‡§ï‡•Å‡§ï‡•Ä‡§ú ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç"""
        try:
            os.makedirs("data/cookies", exist_ok=True)
            with open(self.config['cookies_file'], "wb") as f:
                pickle.dump(self.driver.get_cookies(), f)
            print("üíæ ‡§ï‡•Å‡§ï‡•Ä‡§ú ‡§∏‡•á‡§µ ‡§π‡•ã ‡§ó‡§à‡§Ç")
        except Exception as e:
            print(f"‚ùå ‡§ï‡•Å‡§ï‡•Ä‡§ú ‡§∏‡•á‡§µ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç error: {e}")
    
    def load_cookies(self):
        """‡§ï‡•Å‡§ï‡•Ä‡§ú ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç"""
        try:
            with open(self.config['cookies_file'], "rb") as f:
                cookies = pickle.load(f)
            
            # ‡§∏‡§≠‡•Ä ‡§ï‡•Å‡§ï‡•Ä‡§ú ‡§ê‡§° ‡§ï‡§∞‡•á‡§Ç
            for cookie in cookies:
                try:
                    self.driver.add_cookie(cookie)
                except:
                    continue
            
            print("üç™ ‡§ï‡•Å‡§ï‡•Ä‡§ú ‡§≤‡•ã‡§° ‡§π‡•ã ‡§ó‡§à‡§Ç")
            return True
        except FileNotFoundError:
            print("‚ö†Ô∏è  ‡§ï‡•ã‡§à ‡§∏‡•á‡§µ‡•ç‡§° ‡§ï‡•Å‡§ï‡•Ä‡§ú ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡§Ç")
            return False
        except Exception as e:
            print(f"‚ùå ‡§ï‡•Å‡§ï‡•Ä‡§ú ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç error: {e}")
            return False
    
    def load_messages(self):
        """‡§Æ‡•à‡§∏‡•á‡§ú‡•á‡§∏ ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç"""
        try:
            with open(self.config['messages_file'], 'r', encoding='utf-8') as f:
                messages = [line.strip() for line in f if line.strip()]
            
            print(f"üì® {len(messages)} ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≤‡•ã‡§° ‡§π‡•ã ‡§ó‡§è")
            return messages
        except Exception as e:
            print(f"‚ùå ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç error: {e}")
            return []
    
    def find_e2ee_elements(self):
        """E2EE ‡§ö‡•à‡§ü ‡§ï‡•á elements ‡§¢‡•Ç‡§Ç‡§¢‡•á‡§Ç"""
        try:
            # Message box ‡§¢‡•Ç‡§Ç‡§¢‡•á‡§Ç
            message_box = WebDriverWait(self.driver, 15).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "div[role='textbox'], div[contenteditable='true']"))
            )
            
            # Send button ‡§¢‡•Ç‡§Ç‡§¢‡•á‡§Ç
            send_button = WebDriverWait(self.driver, 15).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "div[aria-label='Send'][role='button'], button[type='submit']"))
            )
            
            return message_box, send_button
        except Exception as e:
            print(f"‚ùå E2EE elements ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•á: {e}")
            return None, None
    
    def send_e2ee_message(self, message):
        """E2EE ‡§ö‡•à‡§ü ‡§Æ‡•á‡§Ç ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡•á‡§Ç"""
        try:
            message_box, send_button = self.find_e2ee_elements()
            
            if not message_box or not send_button:
                print("‚ùå ‡§Æ‡•à‡§∏‡•á‡§ú ‡§¨‡•â‡§ï‡•ç‡§∏ ‡§Ø‡§æ ‡§∏‡•á‡§Ç‡§° ‡§¨‡§ü‡§® ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ")
                return False
            
            # ‡§™‡•Å‡§∞‡§æ‡§®‡§æ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§ï‡•ç‡§≤‡§ø‡§Ø‡§∞ ‡§ï‡§∞‡•á‡§Ç
            message_box.clear()
            
            # ‡§®‡§Ø‡§æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç
            message_box.send_keys(message)
            time.sleep(2)
            
            # ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡•á‡§Ç
            send_button.click()
            time.sleep(3)
            
            self.messages_sent += 1
            print(f"‚úÖ [{self.messages_sent}] E2EE ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú ‡§¶‡§ø‡§Ø‡§æ: {message}")
            return True
            
        except Exception as e:
            print(f"‚ùå ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç error: {e}")
            return False
    
    def start_auto_messaging(self):
        """‡§ë‡§ü‡•ã ‡§Æ‡•à‡§∏‡•á‡§ú‡§ø‡§Ç‡§ó ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç"""
        if not self.driver:
            print("‚ùå ‡§™‡§π‡§≤‡•á ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç (Option 1)")
            return
        
        messages = self.load_messages()
        if not messages:
            print("‚ùå ‡§ï‡•ã‡§à ‡§Æ‡•à‡§∏‡•á‡§ú ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•á")
            return
        
        print(f"""
        ====================================
        ü§ñ E2EE AUTO MESSAGING STARTING...
        ====================================
        
        üìù Total Messages: {len(messages)}
        ‚è∞ Delay Range: {self.config['min_delay']}-{self.config['max_delay']}s
        üîí E2EE Chat: ACTIVE
        
        üõë Stop with: CTRL+C
        ====================================
        """)
        
        input("üëâ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ENTER ‡§¶‡§¨‡§æ‡§è‡§Ç...")
        
        self.is_running = True
        message_index = 0
        
        try:
            while self.is_running and messages:
                current_message = messages[message_index]
                
                # ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡•á‡§Ç
                if self.send_e2ee_message(current_message):
                    message_index = (message_index + 1) % len(messages)
                    
                    # ‡§∞‡•à‡§Ç‡§°‡§Æ ‡§°‡§ø‡§≤‡•á
                    delay = random.randint(self.config['min_delay'], self.config['max_delay'])
                    print(f"‚è≥ ‡§Ö‡§ó‡§≤‡§æ ‡§Æ‡•à‡§∏‡•á‡§ú {delay} ‡§∏‡•á‡§ï‡§Ç‡§° ‡§Æ‡•á‡§Ç...")
                    
                    # ‡§°‡§ø‡§≤‡•á with interrupt check
                    for i in range(delay):
                        if not self.is_running:
                            break
                        time.sleep(1)
                else:
                    print("üîÑ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§´‡•á‡§≤, ‡§∞‡§ø‡§ü‡•ç‡§∞‡§æ‡§Ø‡§ø‡§Ç‡§ó...")
                    time.sleep(10)
                    
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  ‡§ë‡§ü‡•ã ‡§Æ‡•à‡§∏‡•á‡§ú‡§ø‡§Ç‡§ó ‡§∞‡•ã‡§ï ‡§¶‡•Ä ‡§ó‡§à")
        except Exception as e:
            print(f"‚ùå ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ error: {e}")
        finally:
            self.is_running = False
    
    def change_settings(self):
        """‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§¨‡§¶‡§≤‡•á‡§Ç"""
        print("\n‚öôÔ∏è  ‡§¨‡•â‡§ü ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏")
        
        try:
            print(f"‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§°‡§ø‡§≤‡•á: {self.config['delay']}s")
            new_delay = input("‡§®‡§Ø‡§æ ‡§°‡§ø‡§≤‡•á (‡§∏‡•á‡§ï‡§Ç‡§° ‡§Æ‡•á‡§Ç): ")
            if new_delay:
                self.config['delay'] = int(new_delay)
            
            print(f"‡§Æ‡§ø‡§®‡§ø‡§Æ‡§Æ ‡§°‡§ø‡§≤‡•á: {self.config['min_delay']}s")
            new_min = input("‡§®‡§Ø‡§æ ‡§Æ‡§ø‡§®‡§ø‡§Æ‡§Æ ‡§°‡§ø‡§≤‡•á: ")
            if new_min:
                self.config['min_delay'] = int(new_min)
            
            print(f"‡§Æ‡•à‡§ï‡•ç‡§∏‡§ø‡§Æ‡§Æ ‡§°‡§ø‡§≤‡•á: {self.config['max_delay']}s")
            new_max = input("‡§®‡§Ø‡§æ ‡§Æ‡•à‡§ï‡•ç‡§∏‡§ø‡§Æ‡§Æ ‡§°‡§ø‡§≤‡•á: ")
            if new_max:
                self.config['max_delay'] = int(new_max)
            
            # ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç
            with open('main/config.json', 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=4)
            
            print("‚úÖ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§∏‡•á‡§µ ‡§π‡•ã ‡§ó‡§à‡§Ç")
            
        except ValueError:
            print("‚ùå ‡§ó‡§≤‡§§ ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç! ‡§®‡§Ç‡§¨‡§∞ ‡§°‡§æ‡§≤‡•á‡§Ç")
        except Exception as e:
            print(f"‚ùå ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§∏‡•á‡§µ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç error: {e}")
    
    def manage_messages(self):
        """‡§Æ‡•à‡§∏‡•á‡§ú‡•á‡§∏ ‡§Æ‡•à‡§®‡•á‡§ú ‡§ï‡§∞‡•á‡§Ç"""
        print("\nüìù ‡§Æ‡•à‡§∏‡•á‡§ú ‡§Æ‡•à‡§®‡•á‡§ú‡§Æ‡•á‡§Ç‡§ü")
        print("1. ‡§Æ‡•à‡§∏‡•á‡§ú‡•á‡§∏ ‡§¶‡•á‡§ñ‡•á‡§Ç")
        print("2. ‡§®‡§Ø‡§æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§ê‡§° ‡§ï‡§∞‡•á‡§Ç")
        print("3. ‡§Æ‡•à‡§∏‡•á‡§ú ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡•á‡§Ç")
        
        choice = input("üëâ ‡§ö‡•Å‡§®‡§æ‡§µ ‡§ï‡§∞‡•á‡§Ç: ")
        
        try:
            if choice == '1':
                messages = self.load_messages()
                for i, msg in enumerate(messages, 1):
                    print(f"{i}. {msg}")
                    
            elif choice == '2':
                new_msg = input("‡§®‡§Ø‡§æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§°‡§æ‡§≤‡•á‡§Ç: ")
                with open(self.config['messages_file'], 'a', encoding='utf-8') as f:
                    f.write(new_msg + '\n')
                print("‚úÖ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§ê‡§° ‡§π‡•ã ‡§ó‡§Ø‡§æ")
                
            elif choice == '3':
                messages = self.load_messages()
                for i, msg in enumerate(messages, 1):
                    print(f"{i}. {msg}")
                
                msg_num = int(input("‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•à‡§∏‡•á‡§ú ‡§®‡§Ç‡§¨‡§∞ ‡§°‡§æ‡§≤‡•á‡§Ç: ")) - 1
                if 0 <= msg_num < len(messages):
                    del messages[msg_num]
                    with open(self.config['messages_file'], 'w', encoding='utf-8') as f:
                        for msg in messages:
                            f.write(msg + '\n')
                    print("‚úÖ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§π‡•ã ‡§ó‡§Ø‡§æ")
                else:
                    print("‚ùå ‡§ó‡§≤‡§§ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§®‡§Ç‡§¨‡§∞")
                    
        except Exception as e:
            print(f"‚ùå Error: {e}")
    
    def show_status(self):
        """‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç"""
        print(f"""
        ====================================
        üìä BOT STATUS
        ====================================
        
        ü§ñ ‡§¨‡•â‡§ü ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏: {'RUNNING' if self.is_running else 'STOPPED'}
        üì® ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡•á: {self.messages_sent}
        üîó ‡§°‡•ç‡§∞‡§æ‡§á‡§µ‡§∞: {'ACTIVE' if self.driver else 'INACTIVE'}
        ‚è∞ ‡§°‡§ø‡§≤‡•á: {self.config['delay']}s
        
        ====================================
        """)
    
    def cleanup(self):
        """‡§ï‡•ç‡§≤‡•Ä‡§®‡§Ö‡§™"""
        self.is_running = False
        if self.driver:
            self.driver.quit()
            print("üßπ ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§¨‡§Ç‡§¶ ‡§π‡•ã ‡§ó‡§Ø‡§æ")
